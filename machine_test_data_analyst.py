# -*- coding: utf-8 -*-
"""Machine Test: Data Analyst

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w5HmnABy8qGQ7n8a-fmqFu9mF8Zr2Ljn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset (replace 'your_dataset.csv' with the path to your file)

 # Update the file path as per your Drive location

data = pd.read_csv('/content/retail_sales_dataset.csv')

# Display the first few rows of the dataset
print("Initial Data Preview:")
print(data.head())

# 1. Data Cleaning and Preparation

# Check for missing values
print("\nMissing Values:")
print(data.isnull().sum())

# Handle missing values (example: drop rows with missing 'Customer ID')
data = data.dropna(subset=['Customer ID'])

# Fill missing values for other columns (example: fill missing 'Age' with median)
data['Age'] = data['Age'].fillna(data['Age'].median())

# Check for duplicates
print("\nDuplicate Rows:")
print(data.duplicated().sum())

# Remove duplicate rows
data = data.drop_duplicates()

# Standardize 'Date' format
data['Date'] = pd.to_datetime(data['Date'], errors='coerce')

# Remove rows with invalid dates
data = data.dropna(subset=['Date'])

# Create Derived Columns
# Revenue per Customer (Group by 'Customer ID')
data['Revenue per Customer'] = data.groupby('Customer ID')['Total Amount'].transform('sum')

# Total Revenue (for verification)
total_revenue = data['Total Amount'].sum()
print(f"\nTotal Revenue: {total_revenue}")

# 2. Exploratory Data Analysis (EDA)

# Top-performing products
print("\nTop-performing Products:")
product_performance = data.groupby('Product Category')['Total Amount'].sum().sort_values(ascending=False)
print(product_performance)

# Plot top-performing products
plt.figure(figsize=(10, 6))
product_performance.plot(kind='bar', color='skyblue')
plt.title('Top-Performing Products')
plt.xlabel('Product Category')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()

# Seasonal trends (Sales over time)
data['Month'] = data['Date'].dt.to_period('M')
sales_trend = data.groupby('Month')['Total Amount'].sum()

# Plot sales trends
plt.figure(figsize=(12, 6))
sales_trend.plot(kind='line', marker='o', color='green')
plt.title('Sales Trend Over Time')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.grid(True)
plt.show()

# Customer Segmentation (based on Quantity and Total Amount)
print("\nCustomer Segmentation:")
sns.scatterplot(data=data, x='Quantity', y='Total Amount', hue='Gender', alpha=0.6)
plt.title('Customer Segmentation by Quantity and Total Amount')
plt.xlabel('Quantity')
plt.ylabel('Total Amount')
plt.show()

# 3. Visualization

# Sales Trend Analysis Chart
plt.figure(figsize=(12, 6))
sales_trend.plot(kind='line', marker='o', color='blue')
plt.title('Sales Trend Analysis')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.grid(True)
plt.show()

# Customer Segmentation Visual
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='Quantity', y='Total Amount', hue='Gender', palette='Set2', alpha=0.7)
plt.title('Customer Segmentation by Quantity and Total Amount')
plt.xlabel('Quantity')
plt.ylabel('Total Amount')
plt.legend(title='Gender')
plt.show()

# Chart Supporting a Major Insight: Revenue per Age Group
age_group_revenue = data.groupby(pd.cut(data['Age'], bins=[0, 18, 30, 45, 60, 100]))['Total Amount'].sum()
plt.figure(figsize=(10, 6))
age_group_revenue.plot(kind='bar', color='coral')
plt.title('Revenue Contribution by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.show()

# 5. Bonus Task: Predict Next Month's Sales

# Convert sales_trend to a time series for modeling
sales_trend.index = sales_trend.index.to_timestamp()

# Split data into training and testing sets
train_size = int(len(sales_trend) * 0.8)
train, test = sales_trend[:train_size], sales_trend[train_size:]

# Fit ARIMA model
model = ARIMA(train, order=(5, 1, 0))  # Adjust order as necessary
fitted_model = model.fit()

# Forecast the next month
forecast = fitted_model.forecast(steps=1)
print("\nNext Month's Sales Prediction:")
print(forecast)

# Evaluate model performance
predictions = fitted_model.forecast(steps=len(test))
mse = mean_squared_error(test, predictions)
print(f"\nMean Squared Error: {mse}")

# Plot actual vs. predicted sales
plt.figure(figsize=(12, 6))
plt.plot(train, label='Training Data', color='blue')
plt.plot(test, label='Actual Sales', color='green')
plt.plot(test.index, predictions, label='Predicted Sales', color='red', linestyle='--')
plt.title('Actual vs. Predicted Sales')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.legend()
plt.show()